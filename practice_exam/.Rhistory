curve(dgumbel(x, mu = parameters_gumbel[1], b = parameters_gumbel[2]), add = TRUE, col = "red")
legend("topright", c("Method of Moments", "Maximum Likelihood"), col = c("blue, red"))
legend("topright", c("Method of Moments", "Maximum Likelihood"), col = c("blue, red"), lty = 1)
legend("topright", c("Method of Moments", "Maximum Likelihood"), col = c("blue, red"), lty = "l")
legend("topright", c("Method of Moments", "Maximum Likelihood"), col = c("blue, red"))
legend("topright", c("Method of Moments", "Maximum Likelihood"), lty = 1, col = c("red", "blue"))
legend("topright", c("Method of Moments", "Maximum Likelihood"), lty = 1, col = c("blue", "red"))
#Question 3.4
par_gauss_gumbel <- optim(par = c(0, 1), fn= dnorm, xvals= wind)$par
#Question 3.4
par_gauss_gumbel <- optim(par = c(0, 1), fn= dnorm(wind))$par
optim(par = c(mu_est, b_est), fn= gumbelLL, xvals= wind)
optim(par = c(1, 0), fn= gumbelLL, xvals= wind)
optim(par = c(1, 1), fn= gumbelLL, xvals= wind)
optim(par = c(1, 1), fn= dnorm, xvals= wind)
optim(par = c(1, 1), fn= dnorm)
optim(par = c(1, 1), fn= -sum(dnorm(wind, log = T)))
optim(par = c(1, 1), fn = -sum(dnorm(wind, log = T)))
?optim
optim(par = c(1, 1), fn = -sum(dnorm(wind, log = T)))
gumbellGaussLL <- function(parameters, xvals){
return(-sum(dnorm(xvals, mean = parameters[1], sd = parameters[2], log = TRUE)))
}
optim(par = c(1, 1), fn = gumbellGaussLL)
optim(par = c(1, 1), fn = gumbellGaussLL, xvals=wind)
par_gauss_gumbel <- optim(par = c(0, 1), fn= gumbellGaussLL, xvals= wind)$par
hist(wind, probability = TRUE)
curve(dnorm(x, mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2]), add = TRUE, col = "blue")
qqplot(wind, dnorm(ppoints(wind), mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2]))
qqplot(wind, dnorm(ppoints(wind), mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2], log = T))
qqplot(wind, dnorm(ppoints(wind), mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2], log = T))
qqplot(wind, dnorm(ppoints(wind), mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2]))
?AIC
replicate(2, {
3+2
})
replicate(2, {
3+2
1+1
})
replicate(2, {
x <- 3+2
y <- 1+1
x, y
})
replicate(2, {
x <- 3+2
y <- 1+1
c(x, y)
})
replicate(3, {
x <- 3+2
y <- 1+1
c(x, y)
})
?sample
replicate(3, {
wind_bs <- sample(wind, size = length(wind), replace = TRUE)
optim(par = c(mu_est, b_est), fn= gumbelLL, xvals= wind_bs)$par
c(x, y)
})
replicate(3, {
wind_bs <- sample(wind, size = length(wind), replace = TRUE)
optim(par = c(mu_est, b_est), fn= gumbelLL, xvals= wind_bs)$par
})
wind_para_bs <- replicate(1000, {
wind_bs <- sample(wind, size = length(wind), replace = TRUE)
optim(par = c(mu_est, b_est), fn= gumbelLL, xvals= wind_bs)$par
})
wind_para_bs
wind_para_bs <- t(wind_para_bs)
wind_para_bs <- as.data.frame(wind_para_bs)
wind_para_bs
head(wind_para_bs)
sapply(wind_para_bs, function(x) sd(x))
bmi_model$coefficients
standarderror_bs
mu_se <- sd(wind_para_bs$V1)
z <- qnorm(1-0.05/2)
mu_a <- mu_ests - z * sqrt(mu_se)
mu_b <- mu_ests + z * sqrt(mu_se)
mu_ci <- c(mu_a, mu_b)
mu_ci
mu_se <- sd(wind_para_bs$V1)
z <- qnorm(1-0.05/2)
mu_a <- mu_ests - z * sqrt(mu_se)
mu_a <- mu_est - z * sqrt(mu_se)
mu_b <- mu_est + z * sqrt(mu_se)
mu_ci <- c(mu_a, mu_b)
mu_ci
b_se <- sd(wind_para_bs$V2)
z <- qnorm(1-0.05/2)
b_a <- b_est - z * sqrt(b_se)
b_b <- b_est + z * sqrt(b_se)
b_ci <- c(b_a, b_b)
b_ci
#percentile confidence intervals
?quantile()
#percentile confidence intervals
quantile(wind_para_bs$V1, probs = c(0.05/2, 1 - 0.05/2))
quantile(wind_para_bs$V2, probs = c(0.05/2, 1 - 0.05/2))
#Question 1.3
head(radiation)
head(probability_mice)
strep
#Question 1.4
glm(prob ~ dose, data = strep, family = "binomial")
?predict
#Question 1.4
log_regr_1 <- glm(prob ~ dose, data = strep, family = "binomial")
predict(log_regr_1)
plot(predict(log_regr_1))
plot(strep$dose, strep$prob, type = "o", col = "red", xlab = "Dose", ylab = "Probability", main = "Probability of Death", ylim= c(0,0.2))
lines(cont$dose, cont$prob, type = "o", col = "blue")
summary(strep)
head(strep)
strep
#Question 1.4
head(radiation)
dead_dose_logit <- radiation[radiation$dead == 0]
radiation[radiation$dead == 0]
radiation[radiation$dead == 0]
radiation[radiation$dead == 0,]
summary(radiation)
radiation[radiation$dead == 0,]
dead_dose_logit <- radiation[radiation$dead == 0,]
dead_dose_logit <- dead_dose_logit[dead_dose_logit$treatment == 1, ]
head(dead_dose_logit)
dead_dose_logit$dose <- NULL
#Question 1.4
head(dead_dose_logit)
dead_dose_logit <- radiation[radiation$dead == 0,]
dead_dose_logit <- dead_dose_logit[dead_dose_logit$treatment == 1, ]
dead_dose_logit$dead <- NULL
#Question 1.4
head(dead_dose_logit)
probability_mice
strep
death
probability_mice
as.data.frame(table(radiation))
table(radiation)
as.data.frame(table(radiation))
########Gherardo solution
table(radiation)[,,2]
table(radiation)
table(radiation)[1,]
table(radiation)[1,,]
table(radiation)[,1,]
table(radiation)[,,1]
table(radiation)[,,2]
death
probs_death <- table(radiation)[,,2] /
(table(radiation)[,,1] + table(radiation)[,,2])
probs_death
doses <- dimnames(probs_death)$dose
plot(doses, probs_death[, 1], type = "b", col = "red", ylim = c(0,1),
ylab = "probability", main = "Probability of death")
lines(doses, probs_death[, 2], type = "b", col = "blue")
legend("topleft", legend = c("Streptomycin", "Saline control"),
col = c("blue", "red"), lty = 1, pch = 1)
plot(doses, probs_death[, 1], type = "b", col = "red", ylim = c(0,1),
ylab = "probability", main = "Probability of death")
lines(doses, probs_death[, 2], type = "b", col = "blue")
legend("topleft", legend = c("Streptomycin", "Saline control"),
col = c("blue", "red"), lty = 1, pch = 1)
#Question 1.2
chisq.test(table(radiation[radiation$dose == 201, c(2, 3)]))
#p value greater than 0.05 so we cannot reject the null hypothesis. So we cannot reject that death and radiation are indepedant
chisq.test(table(radiation[radiation$dose == 220, c(2, 3)]))
sapply(doses, function(d){
probs <- probs_death[d,]
n1 <- sum(radiation$dose == d & radiation$treatment == 1)
n0 <- sum(radiation$dose == d & radiation$treatment == 1) ## in this case they are equal
delta <- probs[2] - probs[1] ## the order is inverted
se <- sqrt(probs[1]*(1 - probs[1]) / n0 + probs[2] * (1 - probs[2]) / n1)
return(list(delta = delta, se = se, W = delta / se)
sapply(doses, function(d){
probs <- probs_death[d,]
n1 <- sum(radiation$dose == d & radiation$treatment == 1)
n0 <- sum(radiation$dose == d & radiation$treatment == 1) ## in this case they are equal
delta <- probs[2] - probs[1] ## the order is inverted
se <- sqrt(probs[1]*(1 - probs[1]) / n0 + probs[2] * (1 - probs[2]) / n1)
return(list(delta = delta, se = se, W = delta / se))
})
sapply(doses, function(d){
probs <- probs_death[d,]
n1 <- sum(radiation$dose == d & radiation$treatment == 1)
n0 <- sum(radiation$dose == d & radiation$treatment == 1) ## in this case they are equal
delta <- probs[2] - probs[1] ## the order is inverted
se <- sqrt(probs[1]*(1 - probs[1]) / n0 + probs[2] * (1 - probs[2]) / n1)
return(list(delta = delta, se = se, W = delta / se))
})
Wald.stats <- t(sapply(doses, function(d){
probs <- probs_death[d,]
n1 <- sum(radiation$dose == d & radiation$treatment == 1)
n0 <- sum(radiation$dose == d & radiation$treatment == 1) ## in this case they are equal
delta <- probs[2] - probs[1] ## the order is inverted
se <- sqrt(probs[1]*(1 - probs[1]) / n0 + probs[2] * (1 - probs[2]) / n1)
return(list(delta = delta, se = se, W = delta / se))
}))
Wald.stats
doses
probs_death
probs_death
dimnames(probs_death)
probs_death
probs_death[, 1]
probs_death
Wald.stats
sapply(doses, function(d) probs <- probs_death[d,])
sapply(doses, function(d) {probs <- probs_death[d,]})
sapply(doses, function(d) {
probs <- probs_death[d,]
n1 <- sum(radiation$dose == d & radiation$treatment == 1)
})
radiation
radiation$dose
radiation$dose == 220
radiation$treatment
sapply(doses, function(d) {
probs <- probs_death[d,]
})
sapply(doses, function(d) {
probs <- probs_death[d,]
probs[2]
})
alpha <- 0.05
z <- qnorm(alpha)
norm(alpha)
qnorm(alpha)
t(sapply(doses, function(d){
W <- Wald.stats[d,]
return(list(W = W, reject = W < z, pvalue = pnorm(W)))
}))
t(sapply(doses, function(d){
W <- Wald.stats[d,]$W
return(list(W = W, reject = W < z, pvalue = pnorm(W)))
}))
radiation[radiation$treatment == 1,] == strep
radiation[radiation$treatment == 1,]
length(radiation[radiation$treatment == 1,])
nrow(radiation[radiation$treatment == 1,])
strep
nrow(radiation[radiation$treatment == 1,])
head(radiation[radiation$treatment == 1,])
logregr1 <- glm(dead ~ dose, family = binomial, data = radiation[radiation$treatment == 1,])
summary(logregr1)
?step?
#############
#Question 2.1
fat_model <- lm(fat ~ ., data = bodyfat)
?step
summary(fat_model)
summary(bmi_model)
ci_bmi
confint(bmi_model)
bodyfat[sample(nrow(bodyfat), size = nrow(bodyfat), replace = TRUE),]
bodyfat[sample(1:nrow(bodyfat), size = nrow(bodyfat), replace = TRUE),]
length(bodyfat[sample(nrow(bodyfat), size = nrow(bodyfat), replace = TRUE),])
nrow(bodyfat[sample(nrow(bodyfat), size = nrow(bodyfat), replace = TRUE),])
nrow(bodyfat[sample(1:nrow(bodyfat), size = nrow(bodyfat), replace = TRUE),])
standarderror_bs
bootstrap_coefficients
log_regr_1
log_regr_1$coefficients
coefficients(log_regr_1)
bootstrap_coefficients
bootstrap_coefficients
t(bootstrap_coefficients)
ci_bmi
bootstrap_coefficients
###Gherardo
apply(bootstrap_coefficients, MARGIN = 1, quantile, probs = c(alpha/2, 1 - alpha/2))
###Gherardo
t(apply(bootstrap_coefficients, MARGIN = 1, quantile, probs = c(alpha/2, 1 - alpha/2)))
bootstrap_coefficients <- replicate(1000, expr = {
bodyfat_bs <- bodyfat[sample(nrow(bodyfat), size = nrow(bodyfat), replace = TRUE),] #sample dataframe
bmi_bs <- bodyfat_bs$weight/(bodyfat_bs$height)^2
lm(fat ~ bmi_bs + age, data = bodyfat_bs)$coefficients
})
###Gherardo
t(apply(bootstrap_coefficients, MARGIN = 1, quantile, probs = c(alpha/2, 1 - alpha/2)))
###Gherardo
x <- t(apply(bootstrap_coefficients, MARGIN = 1, quantile, probs = c(alpha/2, 1 - alpha/2)))
x
bootstrap_coefficients <- t(bootstrap_coefficients) #transpose results
bootstrap_coefficients <- as.data.frame(bootstrap_coefficients)
standarderror_bs <- sapply(bootstrap_coefficients, function(x) sd(x))
z <- qnorm(1-0.05/2)
a <- bmi_model$coefficients - z * sqrt(standarderror_bs)
b <- bmi_model$coefficients + z * sqrt(standarderror_bs)
ci_bmi <- c(a, b)
ci_bmi
ci_bmi
z <- qnorm(1-0.05/2)
a <- bmi_model$coefficients - z * sqrt(standarderror_bs)
b <- bmi_model$coefficients + z * sqrt(standarderror_bs)
ci_bmi <- c(a, b)
ci_bmi
x
?quantile
hist(rgumbel(10000), probability = TRUE, ylim = c(0, 0.4))
curve(dgumbel, add = TRUE, col = "blue")
hist(rgumbel(10000), probability = TRUE, ylim = c(0, 0.4), breaks="FD")
curve(dgumbel, add = TRUE, col = "blue")
hist(rgumbel(10000), probability = TRUE, ylim = c(0, 0.4))
curve(dgumbel, add = TRUE, col = "blue")
?hist
mu <- 10
b <- 2
sort(rnorm(2, mu, 10 * b))
sort(rnorm(2, mu, 10 * b))
interval <- sort(rnorm(2, mu, 10 * b))
pgumbel(interval, mu = mu, b = b)
p <-  pgumbel(interval, mu = mu, b = b)
integrate(dgumbel, interval[1], interval[2], mu = mu, b = b)$value - (p[2] - p[1])
(p[2] - p[1])
integrate(dgumbel, interval[1], interval[2], mu = mu, b = b)$value
b_est
mu_est
hist(wind, probability = TRUE)
curve(dgumbel(x, mu = mu_est, b = b_est), add = TRUE, col = "blue")
qqplot(wind, rgumbel(ppoints(wind), mu= mu_est, b = b_est))
abline(0, 1, col = 'red')
qqplot(sort(wind), rgumbel(ppoints(wind), mu= mu_est, b = b_est))
abline(0, 1, col = 'red')
first <- FALSE
for (mu in -5:5){
curve(dgumbel(x, mu = mu, b =1), from = -10, to = 10, col = (mu + 5), add = first,
main = "dgumbel(x, mu, 1)", ylab = "density")
first <- TRUE
}
legend("right", legend = -5:5, col = -5:5 + 5, lty = 1)
first <- FALSE
for (b in 1:5){
curve(dgumbel(x, mu = 0, b = b / 5), from = -6, to = 6, col = (b), add = first,
main = "dgumbel(x, 0, b)", ylab = "density")
first <- TRUE
}
legend("right", legend = (1:5 ) / 5, col = 1:5 + 5, lty = 1)
first <- FALSE
for (b in 1:5){
curve(pgumbel(x, mu = 0, b = b / 5), from = -6, to = 6, col = (b), add = first,
main = "pgumbel(x, 0, b)", ylab = "probabilty")
first <- TRUE
}
legend("right", legend = (1:5 ) / 5, col = 1:5 + 5, lty = 1)
first <- FALSE
for (b in 1:5){
curve(qgumbel(x, mu = 0, b = b / 5), from = 0, to = 1, col = (b), add = first,
main = "qgumbel(x, 0, b)", ylab = "quantile", xlab = "probability", ylim = c(-2, 4))
first <- TRUE
}
legend("right", legend = (1:5 ) / 5, col = 1:5 + 5, lty = 1)
M <- 1000
pars_bt <- replicate(M, {
optim(par = c(mu_m, b_m), fn = mll, data = sample(wind, replace =TRUE))$par
})
SE <- apply(pars_bt, MARGIN = 1, sd)
SE
M <- 1000
pars_bt <- replicate(M, {
optim(par = c(mu_est, b_est), fn = mll, data = sample(wind, replace =TRUE))$par
})
SE <- apply(pars_bt, MARGIN = 1, sd)
SE
M <- 1000
pars_bt <- replicate(M, {
optim(par = c(mu_est, b_est), fn = gumbellGaussLL, data = sample(wind, replace =TRUE))$par
})
SE <- apply(pars_bt, MARGIN = 1, sd)
SE
bmi_model$coefficients
ci_bmi
ci_bmi
x
bmi_model$coefficients
standarderror_bs
z <- qnorm(1-0.05/2)
a <- bmi_model$coefficients - z * standarderror_bs
b <- bmi_model$coefficients + z * standarderror_bs
ci_bmi <- c(a, b)
ci_bmi
#Question 3.6
##Bayesian inference, not done yet, skip
qnorm(0.05)
#Question 3.6
##Bayesian inference, not done yet, skip
qnorm(0.5)
#Question 3.6
##Bayesian inference, not done yet, skip
qnorm(0.05)
#Question 3.6
##Bayesian inference, not done yet, skip
qnorm(0.95)
#Question 3.6
##Bayesian inference, not done yet, skip
qnorm(0.05)
#Question 3.6
##Bayesian inference, not done yet, skip
qnorm(1-0.05)
head(radiation)
head(radiation[radiation$treatment == 1,)
head(radiation[radiation$treatment == 1,])
doses <- as.numeric(doses) ##we need numeric values now
predicted_probs <- predict(logregr1, type = "response", newdata = data.frame(dose = doses))
### now we just repeta the plot of Q1.1
plot(doses, probs_death[, 2], type = "b", col = "blue", ylim = c(0,1),
ylab = "probability", main = "Probability of death (Streptomycin)")
lines(doses, predicted_probs, type = "b", col = "purple")
legend("topleft", legend = c("Empirical freq.", "Predicted (logregr1)"),
col = c("blue", "purple"), lty = 1, pch = 1)
predicted_probs <- predict(logregr1, newdata = data.frame(dose = doses))
### now we just repeta the plot of Q1.1
plot(doses, probs_death[, 2], type = "b", col = "blue", ylim = c(0,1),
ylab = "probability", main = "Probability of death (Streptomycin)")
lines(doses, predicted_probs, type = "b", col = "purple")
legend("topleft", legend = c("Empirical freq.", "Predicted (logregr1)"),
col = c("blue", "purple"), lty = 1, pch = 1)
squaredres_cv <- sapply(1:nrow(bodyfat), function(i){
tmp_step <- lm(formula(fat_model_forward), data = bodyfat[-i,])
tmp_bmi <- lm(formula(bmi_model), data = bodyfat[-i,])
prd_step <- predict(tmp_step, newdata = bodyfat[i,])
prd_bmi <- predict(tmp_bmi, newdata = bodyfat[i,])
return(c(step = (prd_step - bodyfat$fat[i])^2, bmi =  (prd_bmi - bodyfat$fat[i])^2))
} )
#Question 2.2
fat_model_start <- lm(fat ~ 1, data=bodyfat)
fat_model_forward <- step(fat_model_forward, scope= formula(fat_model), direction = "forward")
#Question 2.2
fat_model_start <- lm(fat ~ 1, data=bodyfat)
fat_model_forward <- step(fat_model_start, scope= formula(fat_model), direction = "forward")
#Question 2.3
bmi <- bodyfat$weight/(bodyfat$height)^2
bmi_model <- lm(fat ~ bmi + age, data = bodyfat)
squaredres_cv <- sapply(1:nrow(bodyfat), function(i){
tmp_step <- lm(formula(fat_model_forward), data = bodyfat[-i,])
tmp_bmi <- lm(formula(bmi_model), data = bodyfat[-i,])
prd_step <- predict(tmp_step, newdata = bodyfat[i,])
prd_bmi <- predict(tmp_bmi, newdata = bodyfat[i,])
return(c(step = (prd_step - bodyfat$fat[i])^2, bmi =  (prd_bmi - bodyfat$fat[i])^2))
} )
bodyfat$bmi <- bi
bodyfat$bmi <- bmi
squaredres_cv <- sapply(1:nrow(bodyfat), function(i){
tmp_step <- lm(formula(fat_model_forward), data = bodyfat[-i,])
tmp_bmi <- lm(formula(bmi_model), data = bodyfat[-i,])
prd_step <- predict(tmp_step, newdata = bodyfat[i,])
prd_bmi <- predict(tmp_bmi, newdata = bodyfat[i,])
return(c(step = (prd_step - bodyfat$fat[i])^2, bmi =  (prd_bmi - bodyfat$fat[i])^2))
} )
squaredres_cv
rowSums(squaredres_cv)
wind
ppoints(wind)
?ppoints
qqplot(sort(wind), rgumbel(ppoints(wind), mu= mu_est, b = b_est))
abline(0, 1, col = 'red')
qqplot(wind, rgumbel(ppoints(wind), mu= mu_est, b = b_est))
sort(
qqplot(sort(wind), rgumbel(ppoints(wind), mu= mu_est, b = b_est))
abline(0, 1, col = 'red')
qqplot(sort(wind), rgumbel(ppoints(wind), mu= mu_est, b = b_est))
abline(0, 1, col = 'red')
hist(wind, probability = TRUE)
curve(dnorm(x, mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2]), add = TRUE, col = "blue")
curve(dnorm(x, mean = mean(wind), sd = sd(wind)), add = TRUE, col = "darkgreen")
qqplot(wind, dnorm(ppoints(wind), mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2]))
qqplot(sort(wind), dnorm(ppoints(wind), mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2]))
qqplot(sort(wind), rnorm(ppoints(wind), mean = par_gauss_gumbel[1], sd = par_gauss_gumbel[2]))
abline(0, 1, col = 'red')
qqplot(sort(wind), rnorm(ppoints(wind), mean = mean(wind), sd = sd(wind)))
qqnorm(wind)
qqline(wind)
qnorm(alpha / 2, lower.tail = FALSE)
qnorm(1-0.05/2)
mu_ci
load("exam.RData")
head(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
expand.grid(supp = levels(ToothGrowth$supp), dose = levels(ToothGrowth$dose))
?expand.grid
combinations <- expand.grid(supp = levels(ToothGrowth$supp), dose = levels(ToothGrowth$dose))
apply(combinations, MARGIN = 1, function(x){
ix <- ToothGrowth$supp == x[1] &
ToothGrowth$dose == x[2]
return( c(mean = mean(ToothGrowth[ix, 1]),
se = sd(ToothGrowth[ix, 1]) / sqrt(sum(ix) )))
} )
apply(combinations, MARGIN = 1, function(x){
ix <- ToothGrowth$supp == x[1
1
?apply
apply(combinations, MARGIN = 1, function(x) { ToothGrowth$supp == x[1]})
apply(combinations, MARGIN = 1, function(x) { ToothGrowth$supp == x[2]})
ToothGrowth$supp
ToothGrowth$supp == x[1] &
ToothGrowth$dose == x[2]
apply(combinations, MARGIN = 1, function(x){
ix <- ToothGrowth$supp == x[1] & ToothGrowth$dose == x[2]}
apply(combinations, MARGIN = 1, function(x){ToothGrowth$supp == x[1] & ToothGrowth$dose == x[2]}
apply(combinations, MARGIN = 1, function(x){ToothGrowth$supp == x[1] & ToothGrowth$dose == x[2]})
ix <- apply(combinations, MARGIN = 1, function(x){ToothGrowth$supp == x[1] & ToothGrowth$dose == x[2]})
ix[1]
ix[2]
ix[1] & ix[2]
apply(combinations, MARGIN = 1, function(x){
ix <- ToothGrowth$supp == x[1] & ToothGrowth$dose == x[2]
return( c(mean = mean(ToothGrowth[ix, 1]),
se = sd(ToothGrowth[ix, 1]) / sqrt(sum(ix) )))
} )
