setwd("class/")
coris <- read.table("coris.dat", skip = 4, sep = ",",
                    col.names = c("row.names", "sbp", "tobacco",
                                  "ldl", "adiposity",
                                  "famhist", "typea", "obesity",
                                  "alcohol",
                                  "age", "chd"))[,-1]
head(coris)
#E 1.1

leaveOneOut <- function(data){
  output <- c()
  for(i in 1:nrow(data)){
    #fit model with all but i row
    model_i <- glm("chd ~ .", family = "binomial", data = coris[-i,])
    # predict value for row i
    predcition_i <- as.numeric(predict(model_i, newdata = coris[i,], type = "response") > 0.5)
    #check if prediction is good or not
    comparison <- predcition_i == data$chd[i]
    ##save it
    output[i] <- comparison
  }
  return(mean(output))
}
leaveOneOut(coris)


coris_model <- glm("chd ~ .", family = "binomial", data = coris[-1,])
predict(coris_model, newdata = coris[1,], type = "response")
as.numeric(predict(coris_model, newdata = coris[1,], type = "response") > 0.5) - coris$chd[1]


#10 fold cross validation

kfold <- function(k, data){
  folds <- list()
  m <- nrow(data) %/% k #group size
  for(i in 1:k){
    folds[[i]] <- ((i-1)*m + 1):(i*m)
  }
  return(folds)
}

folds <- kfold(10, coris)

leave10 <- function(data){
  output <- c()
  for(i in 1:k){
    #fit model with all but i row
    model_i <- glm("chd ~ .", family = "binomial", data = coris[-folds[[i]],])
    # predict value for row i
    predcition_i <- as.numeric(predict(model_i, newdata = coris[folds[[i]],], type = "response") > 0.5)
    #check if prediction is good or not
    comparison <- predcition_i == data$chd[folds[[i]]]
    ##save it
    output[i] <- mean(comparison)
  }
  return(mean(output))
}

leave10(coris)




